X_train<-read.table("./UCI HAR Dataset/X_train.txt")
getwd()
X_train<-read.table("./UCI/HAR/Dataset/X_train.txt")
X_train<-read.table("./UCI/HAR/Dataset/train/X_train.txt")
X_train<-read.table("./UCI HAR Dataset/train/X_train.txt")
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt")
y_train<-read.table("./UCI HAR Dataset/train/y_train.txt")
X_test<-read.table("./UCI HAR Dataset/test/X_test.txt")
subject_test<-("./UCI HAR Dataset/test/subject_test.txt")
subject_test<-read.table("./UCI HAR Dataset/test/subject_test.txt")
y_test<-read.table("./UCI HAR Dataset/train/y_test")
y_test<-read.table("./UCI HAR Dataset/train/y_train")
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt")
?merge()
View(X_test)
View(X_train)
intersect(names(X_test), names(X_train))
test<-merge(X_test, X_train, all=TRUE)
View(test)
min(X_test[,1])
min(X_train[,1])
min(test[,1])
max(X_test[,1])
max(X_train[,1])
max(test[,1])
median(test[,1])
average(test)
average(test[,1])
mean(test[,1])
mean(X_train[,1])
mean(X_test[,1])
mean(mean(X_train[,1]) & mean(X_test[,1]))
mean(X_train[,1]&X_test[,1])
mean(X_train[,1],X_test[,1])
install.packages("dplyr")
library(dplyr)
?join()
test2<-join(X_train, X_test)
test2<-full_join(X_train, X_test)
mean(test)
mean(test[,1])
mean(test2[,1])
sum(test[,1])
sum(test2[,1])
test_labels<-full_join(y_train, y_test)
View(y_test)
View(y_train)
View(test_labels)
c(y_test, y_train)
?merge()
merge(y_train, y_test)
test_labels<-merge(y_train, y_test)
?rbind
?info
??info
??class
test3<-rbind(X_train, X_test)
test4<-rbind(subject_train, subject_test)
View(test4)
View(subject_train)
test5<-rbind(y_train, y_test) #merge training and test activity information
View(test5)
View(y_train)
?grep
dataset_features<-read.table("./UCI HAR Dataset/features.txt") #Read data set feature description into R
activity_labels<-read.table("./UCI HAR Dataset/activity_labels.txt")
View(activity_labels)
View(dataset_features)
library(grep)
grep()
?grep()
grep("mean()", dataset_features, fixed=TRUE)
grep("mean()", names(dataset_features), fixed=TRUE)
grep("mean()", dataset_features[,2], fixed=TRUE)
mean(grep("mean()|std()", dataset_features[,2], fixed=TRUE)
mean(grep("mean()|std()", dataset_features[,2], fixed=TRUE)
mean(grep("mean()"|"std()", dataset_features[,2], fixed=TRUE)
mean(grep("mean()"|"std()", dataset_features[,2], fixed=TRUE)
mean(grep('(mean|std)()', dataset_features[,2], fixed=TRUE)
grep("mean()", dataset_features[,2], fixed=TRUE)
grep("mean()", dataset_features[,2], fixed=TRUE)
grep("sd()", dataset_features[,2], fixed=TRUE)
grep("std()", dataset_features[,2], fixed=TRUE)
grep("meanFreq()", dataset_features[,2], fixed=TRUE)
mean_index<-grep("mean()", dataset_features[,2], fixed=TRUE)
std_index<-grep("std()", dataset_features[,2], fixed=TRUE)
freq_mean_index<-grep("meanFreq()", dataset_features[,2], fixed=TRUE)#Not sure if this is needed or not
rbind(mean_index, std_index)
c(mean_index, std_index)
order(c(mean_index, std_index))
?order
library("gtools", lib.loc="/usr/lib/R/site-library")
library(gtools)
mixedorder(c(mean_index, std_index))
mixedsort(c(mean_index, std_index))
feature_index<-mixedsort(c(mean_index, std_index)) #concatenates mean and std index vectors for subsetting data set
?subset()
subset(test3, feature_index)
test3[feature_index]
test3[feature_index,]
17+49
mean_std_subset<-test3[feature_index,]
View(dataset_features)
View(X_test)
View(test)
View(test_labels)
test5$activity_label<-c()
View(test5)
View(test5)
test5$activity_label<-
test5$activity_label<-NA
View(test5)
View(test5)
test5$activity_label[test5$V1==1]<-"WALKING"
View(test5)
test5$activity_label[test5$V1==2]<-"WALKING_UPSTAIRS"
test5$activity_label[test5$V1==3]<-"WALKING_DOWNSTAIRS"
test5$activity_label[test5$V1==4]<-"SITTING"
test5$activity_label[test5$V1==2]<-"STANDING"
test5$activity_label[test5$V1==2]<-"LAYING"
test5$activity_label[test5$V1==5]<-"STANDING"
test5$activity_label[test5$V1==6]<-"LAYING"
View(test5)
?rbind
test6<-row.names(test5)<- test5$activity_label
View(dataset_features)
View(test_labels)
View(test_labels)
View(test5)
View(mean_std_subset)
View(X_test)
View(X_test)
mean_std_subset<-test3[,feature_index] #extracts mean and std columns using feature_index as the index
View(mean_std_subset)
test6<-row.names(mean_std_subset)<- test5$activity_label
View(test5)
test7<-cbind(test5[,2], mean_std_subset)
View(test7)
View(dataset_features)
?colnames
?colnames
indexed_activity_label<-dataset_features[feature_index,]
View(indexed_activity_label)
test8<- colnames(test7[,2:67], do.NULL=FALSE)<- indexed_activity_label[,3]
transpose_indexed_activity_label<-t(indexed_activity_label[,3])
colnames(test7[2:67])<-indexed_activity_label[,2]
View(test7)
View(test7)
tail(test7)
activity_label_index_vector<-as.vector(indexed_activity_label[,2])
test9<-colnames(test7[2:67])<-activity_label_index_vector
colnames(test7[2:67])<-activity_label_index_vector
View(test7)
colnames(test7[,2:67])<-activity_label_index_vector
View(test7)
?colNames
?colnames
colNames(test7)
colnames(test7)
c("Activity", activity_label_index_vector)
updated_activity_label_index_vector<-c("Activity", activity_label_index_vector)
colnames(test7)<-updated_activity_label_index_vector
View(test7)
View(test4)
test10<-rbind(test4, test7)
test10<-cbind(test4, test7)
View(test10)
View(subject_train)
colnames(test7[,1])<-"Subject"
colnames(test7[,1], value="Subject")
colnames(test7[,1])<-c("Subject")
View(test10)
colnames(test10, c("V1"="Subject"))
View(test10)
colnames(test10)[1]<-"Subject"
View(test10)
?aggregate
View(test10)
test11<-aggregate(Subject~Activity, data=subset(test10, test10$Subject==1 & test10$Activity==STANDING), mean)
test11<-aggregate(Subject~Activity, data=subset(test10, test10$Subject==1 & test10$Activity), mean)
test11<-aggregate(Subject~Activity, data=subset(test10, test10$Subject==1), mean)
View(test11)
View(test10)
?mean()
test12<-aggregate(test10[,3:68], by=list(test10$Subject&test10$Activity), mean)
library(plyr)
test15<-ddply(test10, c("Subject", "Activity"), summarize, )
test15<-ddply(test10, c("Subject", "Activity"), summarize,
mean=colMeans(test10[3:68])
)
View(test15)
?colMeans
test12<-aggregate(test10[,3:68], by=list(test10$Subject&test10$Activity), colMeans)
?colMeans
?apply
summarydata<-data.frame()
for(i in 1:30){
subject_1<-subset(test10, Subject==i)
for(j in c("WALKING", "WALKING_UPSTAIRS", "WALKING DOWNSTAIRS", "SITTING", "STANDING", "LAYING"){
activity_1<-subset(subject_1, Activity==j)
subset_mean<-as.vector(apply(actv,2,mean))
summarydata<-rbind(summarydata, subset_mean)
}
}
summarydata<-data.frame()
for(i in 1:30){
subject_1<-subset(test10, Subject==i)
for(j in c("WALKING", "WALKING_UPSTAIRS", "WALKING DOWNSTAIRS", "SITTING", "STANDING", "LAYING"){
activity_1<-subset(subject_1, Activity==j)
subset_mean<-as.vector(apply(activity_1,2,mean))
summarydata<-rbind(summarydata, subset_mean)
}
}
View(test10)
summarydata<-data.frame()
for(i in 1:30){
subject_1<-subset(test10, Subject==i)
for(j in c("WALKING", "WALKING_UPSTAIRS", "WALKING DOWNSTAIRS", "SITTING", "STANDING", "LAYING"){
activity_1<-subset(subject_1, Activity==j)
subset_mean<-as.vector(apply(activity_1,2,mean))
summarydata<-rbind(summarydata, subset_mean)
}
}
summarydata<-data.frame()
for(i in 1:30){
subject_1<-subset(test10, Subject==i)
for(j in c("WALKING", "WALKING_UPSTAIRS", "WALKING DOWNSTAIRS", "SITTING", "STANDING", "LAYING")){
activity_1<-subset(subject_1, Activity==j)
subset_mean<-as.vector(apply(activity_1,2,mean))
summarydata<-rbind(summarydata, subset_mean)
}
}
View(summarydata)
summarydata<-data.frame()
for(i in 1:30){
subject_1<-subset(test10, Subject==i)
for(j in as.factor(c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING"))){
activity_1<-subset(subject_1, Activity==j)
subset_mean<-as.vector(apply(activity_1,2,mean))
summarydata<-rbind(summarydata, subset_mean)
}
}
View(summarydata)
?colmeans
?colMeans
summarydata<-data.frame()
for(i in 1:30){
subject_1<-subset(test10, Subject==i)
for(j in as.factor(c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING"))){
activity_1<-subset(subject_1, Activity==j)
subset_mean<-as.vector(apply(activity_1,2,colMeans))
summarydata<-rbind(summarydata, subset_mean)
}
}
?apply
?sapply
summarydata<-data.frame()
for(i in 1:30){
subject_1<-subset(test10, Subject==i)
for(j in as.factor(c("WALKING", "WALKING_UPSTAIRS", "WALKING_DOWNSTAIRS", "SITTING", "STANDING", "LAYING"))){
activity_1<-subset(subject_1, Activity==j)
as.numeric(activity_1)
subset_mean<-as.vector(sapply(activity_1,2,mean))
summarydata<-rbind(summarydata, subset_mean)
}
}
?group_by
by_Subject<-group_by(test10, Subject)
Subject_by_Activity<-group_by(test10, Subject, Activity)
View(Subject_by_Activity)
TEst50<-group_by(test10, Subject_by_Activity)
groups(Subject_by_Activity)
summarize(Subject_by_Activity)
?summarize
results<-ddply(test10, c("Subject", "Activity"), numcolwise(mean))
View(results)
150*66
6*30*6
View(activity_labels)
View(test10)
View(results)
View(test10)
View(results)
View(activity_labels)
View(test10)
test5$activity_label[test5$V1==2]<-"WALKING_UPSTAIRS"
test5$activity_label[test5$V1==1]<-"WALKING"
test5$activity_label[test5$V1==2]<-"WALKING_UPSTAIRS"
test5$activity_label[test5$V1==3]<-"WALKING_DOWNSTAIRS"
test5$activity_label[test5$V1==4]<-"SITTING"
test5$activity_label[test5$V1==5]<-"STANDING"
test5$activity_label[test5$V1==6]<-"LAYING"
test7<-cbind(test5[,2], mean_std_subset) #adds activity label column to subsetted mean and std data table
indexed_activity_label<-dataset_features[feature_index,] #creates index of activity labels
activity_label_index_vector<-as.vector(indexed_activity_label[,2]) #creates vector of descriptive activity labels
updated_activity_label_index_vector<-c("Activity", activity_label_index_vector) #adds "activity" to beginning of vector to account for activity column
colnames(test7)<-updated_activity_label_index_vector # renames columns with descriptive labels for activities and statistic
test10<-cbind(test4, test7) #adds subject information to the datatable
colnames(test10)[1]<-"Subject" #Changes column "V1" label to "Subject"
results<-ddply(test10, c("Subject", "Activity"), numcolwise(mean))
View(results)
66*180
good_syntax<-colNames(test7)
good_syntax<-colnames(test7)
make.names(good.syntax)
make.names(good_syntax)
view(test7)
View(test7)
test3<-rbind(X_train, X_test) #merge training and test data sets
test4<-rbind(subject_train, subject_test) # merge training and test subject information
test5<-rbind(y_train, y_test) #merge training and test activity information
mean_index<-grep("mean()", dataset_features[,2], fixed=TRUE)
std_index<-grep("std()", dataset_features[,2], fixed=TRUE)
freq_mean_index<-grep("meanFreq()", dataset_features[,2], fixed=TRUE)#Not sure if this is needed or not
#make a note regarind angle means at the end of dataset and why they were not included
library(gtools)
feature_index<-mixedsort(c(mean_index, std_index)) #concatenates mean and std index vectors for subsetting data set
mean_std_subset<-test3[,feature_index] #extracts mean and std columns using feature_index as the index
#adding data labels
test5$activity_label<-NA #create empty column for adding activity labels
#adds appropriate activity label to activity label index table
test5$activity_label[test5$V1==1]<-"WALKING"
test5$activity_label[test5$V1==2]<-"WALKING_UPSTAIRS"
test5$activity_label[test5$V1==3]<-"WALKING_DOWNSTAIRS"
test5$activity_label[test5$V1==4]<-"SITTING"
test5$activity_label[test5$V1==5]<-"STANDING"
test5$activity_label[test5$V1==6]<-"LAYING"
test7<-cbind(test5[,2], mean_std_subset) #adds activity label column to subsetted mean and std data table
indexed_activity_label<-dataset_features[feature_index,] #creates index of activity labels
activity_label_index_vector<-as.vector(indexed_activity_label[,2]) #creates vector of descriptive activity labels
updated_activity_label_index_vector<-c("Activity", make.names(activity_label_index_vector)) #adds "activity" to beginning of vector to account for activity column
colnames(test7)<-updated_activity_label_index_vector # renames columns with descriptive labels for activities and statistic
test10<-cbind(test4, test7) #adds subject information to the datatable
colnames(test10)[1]<-"Subject" #Changes column "V1" label to "Subject"
results<-ddply(test10, c("Subject", "Activity"), numcolwise(mean))
View(results)
?ddply
results<-ddply(test10, c("Subject", "Activity", "Subject" & "Activity"), numcolwise(mean))
results<-ddply(test10, c("Subject", "Activity", "Subject"%&%"Activity"), numcolwise(mean))
results<-ddply(test10, c("Subject", "Activity", "Subject"&"Activity"), numcolwise(mean))
results<-ddply(test10, c("Subject", "Activity"), numcolwise(mean))
View(results)
View(results)
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
X_train<-read.table("./UCI HAR Dataset/train/X_train.txt") # Read training data set into R
subject_train<-read.table("./UCI HAR Dataset/train/subject_train.txt") # Read training data set subject information into R
y_train<-read.table("./UCI HAR Dataset/train/y_train.txt") # Read training data set activity information into R
X_test<-read.table("./UCI HAR Dataset/test/X_test.txt") # Read test data set into R
subject_test<-read.table("./UCI HAR Dataset/test/subject_test.txt") #Read test data set subject information into R
y_test<-read.table("./UCI HAR Dataset/test/y_test.txt") #Read test data set activity information into R
dataset_features<-read.table("./UCI HAR Dataset/features.txt") #Read data set feature description into R
activity_labels<-read.table("./UCI HAR Dataset/activity_labels.txt")
test3<-rbind(X_train, X_test) #merge training and test data sets
test4<-rbind(subject_train, subject_test) # merge training and test subject information
test5<-rbind(y_train, y_test) #merge training and test activity information
View(test5)
View(test4)
View(test3)
View(dataset_features)
View(dataset_features)
View(dataset_features)
View(results)
View(dataset_features)
View(dataset_features)
getwd()
?ddplyr
?dplyr
?ddply
library("plyr", lib.loc="/usr/lib/R/site-library")
detach("package:plyr", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages("dplyr")
